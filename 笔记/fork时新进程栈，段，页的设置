新进程的内核栈被记录在新进程task_struct中的tss.esp0中：
  fork.c:copy_process()
    p->tss.esp0 = PAGE_SIZE + (long) p;

新进程的用户栈和父进程共享
  fork.c:copy_process()
    p->tss.esp = esp;
注意：新进程第一次被调度时，处于用户态（这时候不会和父进程的用户栈冲突吗？因为用了相同的物理地址）
答：在设置新进程页表项时，每一项都被设为了只读，也就是说，子进程虽然和父进程共享代码段与数据段，但是却不能做任何修改，堆栈自然也不会冲突了
  memmory.c:copy_page_tables()
    this_page &= ~2;    //设为只读
    *to_page_table = this_page;

新进程的代码段与数据段（栈段）与父进程并不共享（但是通过页表，又将它们映射到了相同的物理地址）
  fork.c:copy_process()
    p->tss.cs = cs & 0xffff;    //注意，虽然段选择子的数值相同，但父子进程最终指向的不是同一个段选择符
    p->tss.ss = ss & 0xffff;    //因为进程切换时会重置ldtr，导致它们都是指向自己的ldt中的段选择符
    p->tss.ds = ds & 0xffff;
    ...
    set_tss_desc(gdt+(nr<<1)+FIRST_TSS_ENTRY,&(p->tss));		//将task_struct的tss和ldt挂接到gdt中
    set_ldt_desc(gdt+(nr<<1)+FIRST_LDT_ENTRY,&(p->ldt));

  fork.c:copy_mem()
    set_base(p->ldt[1],new_code_base);   /*个性化自己的ldt内容：设置代码段与数据段基地址（nr * 64MB）*/
    set_base(p->ldt[2],new_data_base);   /*其实这个函数除了基地址还设置了其它标识位*/

新进程与父进程的页目录项不共享，页表不共享，但是页面是共享的，因为段不共享的缘故，所以线性地址不同，自然无法共享页目录项了；
页目录项指向的页表也是为新进程新申请的，而没有使用父进程的，不过在设置页表时，指向的页被设置成了父进程的页，所以页是共享的
  fork.c:copy_mem()

用户态向内核态切换时（0x80）：
栈会从进程的用户栈切换到进程的内核栈（内核本身没有自己的栈）,
而代码段和数据段则会切换到内核自己的数据段与代码段，不在使用ldt，开始使用gdt
自然而然的线性地址变回了0～64mb，使用内核自己的页目录项与页表（前4项页目录项）

不论是任务切换还是系统调用，页表并不用任何切换操作，因为段会切换，段切换后线性地址就会切换，最后导致使用的页表切换
